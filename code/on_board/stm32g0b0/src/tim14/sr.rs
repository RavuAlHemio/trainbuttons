# [doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ; # [doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ; # [doc = "Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Uif { # [doc = "0: No update occurred."] B0x0 = 0 , # [doc = "1: Update interrupt pending. This bit is set by hardware when the registers are updated:"] B0x1 = 1 , } impl From < Uif > for bool { # [inline (always)] fn from (variant : Uif) -> Self { variant as u8 != 0 } } # [doc = "Field `UIF` reader - Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register."] pub type UifR = crate :: BitReader < Uif > ; impl UifR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Uif { match self . bits { false => Uif :: B0x0 , true => Uif :: B0x1 , } } # [doc = "No update occurred."] # [inline (always)] pub fn is_b_0x0 (& self) -> bool { * self == Uif :: B0x0 } # [doc = "Update interrupt pending. This bit is set by hardware when the registers are updated:"] # [inline (always)] pub fn is_b_0x1 (& self) -> bool { * self == Uif :: B0x1 } } # [doc = "Field `UIF` writer - Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register."] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG , Uif > ; impl < 'a , REG > UifW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No update occurred."] # [inline (always)] pub fn b_0x0 (self) -> & 'a mut crate :: W < REG > { self . variant (Uif :: B0x0) } # [doc = "Update interrupt pending. This bit is set by hardware when the registers are updated:"] # [inline (always)] pub fn b_0x1 (self) -> & 'a mut crate :: W < REG > { self . variant (Uif :: B0x1) } } # [doc = "Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cc1if { # [doc = "0: No compare match / No input capture occurred"] B0x0 = 0 , # [doc = "1: A compare match or an input capture occurred."] B0x1 = 1 , } impl From < Cc1if > for bool { # [inline (always)] fn from (variant : Cc1if) -> Self { variant as u8 != 0 } } # [doc = "Field `CC1IF` reader - Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER)."] pub type Cc1ifR = crate :: BitReader < Cc1if > ; impl Cc1ifR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Cc1if { match self . bits { false => Cc1if :: B0x0 , true => Cc1if :: B0x1 , } } # [doc = "No compare match / No input capture occurred"] # [inline (always)] pub fn is_b_0x0 (& self) -> bool { * self == Cc1if :: B0x0 } # [doc = "A compare match or an input capture occurred."] # [inline (always)] pub fn is_b_0x1 (& self) -> bool { * self == Cc1if :: B0x1 } } # [doc = "Field `CC1IF` writer - Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER)."] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG , Cc1if > ; impl < 'a , REG > Cc1ifW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No compare match / No input capture occurred"] # [inline (always)] pub fn b_0x0 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1if :: B0x0) } # [doc = "A compare match or an input capture occurred."] # [inline (always)] pub fn b_0x1 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1if :: B0x1) } } # [doc = "Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'.\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cc1of { # [doc = "0: No overcapture has been detected."] B0x0 = 0 , # [doc = "1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set"] B0x1 = 1 , } impl From < Cc1of > for bool { # [inline (always)] fn from (variant : Cc1of) -> Self { variant as u8 != 0 } } # [doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'."] pub type Cc1ofR = crate :: BitReader < Cc1of > ; impl Cc1ofR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Cc1of { match self . bits { false => Cc1of :: B0x0 , true => Cc1of :: B0x1 , } } # [doc = "No overcapture has been detected."] # [inline (always)] pub fn is_b_0x0 (& self) -> bool { * self == Cc1of :: B0x0 } # [doc = "The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set"] # [inline (always)] pub fn is_b_0x1 (& self) -> bool { * self == Cc1of :: B0x1 } } # [doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'."] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG , Cc1of > ; impl < 'a , REG > Cc1ofW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No overcapture has been detected."] # [inline (always)] pub fn b_0x0 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1of :: B0x0) } # [doc = "The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set"] # [inline (always)] pub fn b_0x1 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1of :: B0x1) } } impl R { # [doc = "Bit 0 - Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register."] # [inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER)."] # [inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 9 - Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'."] # [inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) } } impl W { # [doc = "Bit 0 - Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register."] # [inline (always)] # [must_use] pub fn uif (& mut self) -> UifW < SrSpec > { UifW :: new (self , 0) } # [doc = "Bit 1 - Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER)."] # [inline (always)] # [must_use] pub fn cc1if (& mut self) -> Cc1ifW < SrSpec > { Cc1ifW :: new (self , 1) } # [doc = "Bit 9 - Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'."] # [inline (always)] # [must_use] pub fn cc1of (& mut self) -> Cc1ofW < SrSpec > { Cc1ofW :: new (self , 9) } } # [doc = "status register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { } # [doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { const RESET_VALUE : u32 = 0 ; }