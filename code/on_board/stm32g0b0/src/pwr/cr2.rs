# [doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ; # [doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ; # [doc = "Field `USV` reader - USV"] pub type UsvR = crate :: BitReader ; # [doc = "Field `USV` writer - USV"] pub type UsvW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 10 - USV"] # [inline (always)] pub fn usv (& self) -> UsvR { UsvR :: new (((self . bits >> 10) & 1) != 0) } } impl W { # [doc = "Bit 10 - USV"] # [inline (always)] # [must_use] pub fn usv (& mut self) -> UsvW < Cr2Spec > { UsvW :: new (self , 10) } } # [doc = "Power control register 2\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cr2::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { } # [doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { const RESET_VALUE : u32 = 0 ; }